package api

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/facebookincubator/nvdtools/providers/fireeye/schema"
)

// FetchAllVulnerabilitiesSince will fetch all vulnerabilities with specified parameters
func (c Client) FetchAllVulnerabilitiesSince(since int64) ([]*schema.FireeyeVulnerability, error) {
	parameters := newParametersSince(since)
	if err := parameters.validate(); err != nil {
		return nil, err
	}
	var vulns []*schema.FireeyeVulnerability
	for _, params := range parameters.batchBy(ninetyDays) {
		log.Printf("Fetching: %s\n", params)
		vs, err := c.fetchVulnerabilities(params)
		if err != nil {
			return nil, err
		}
		log.Printf("Adding %d vulns\n", len(vs))
		vulns = append(vulns, vs...)
	}
	return vulns, nil
}

func (c Client) fetchVulnerabilities(parameters timeRangeParameters) ([]*schema.FireeyeVulnerability, error) {
	resp, err := c.Request(fmt.Sprintf("/view/vulnerability?%s", parameters.query()))
	if err != nil {
		return nil, err
	}

	var vulnerabilities []*schema.FireeyeVulnerability
	if err := json.NewDecoder(resp).Decode(&vulnerabilities); err != nil {
		return nil, err
	}

	return vulnerabilities, nil
}
