// Copyright (c) Facebook, Inc. and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

import (
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/facebookincubator/nvdtools/providers/fireeye/schema"
	"github.com/facebookincubator/nvdtools/stats"
)

// FetchAllVulnerabilitiesSince will fetch all vulnerabilities with specified parameters
func (c *Client) FetchAllVulnerabilitiesSince(since int64) ([]*schema.FireeyeVulnerability, error) {
	defer stats.TrackTime("fetch.time", time.Now(), time.Second)
	parameters := newParametersSince(since)
	if err := parameters.validate(); err != nil {
		return nil, err
	}
	var vulns []*schema.FireeyeVulnerability
	for _, params := range parameters.batchBy(ninetyDays) {
		log.Printf("Fetching: %s\n", params)
		vs, err := c.fetchVulnerabilities(params)
		if err != nil {
			return nil, err
		}
		numVulns := len(vs)
		log.Printf("Adding %d vulns\n", numVulns)
		stats.IncrementCounterBy("vulnerabilities", int64(numVulns))
		vulns = append(vulns, vs...)
	}
	return vulns, nil
}

func (c *Client) fetchVulnerabilities(parameters timeRangeParameters) ([]*schema.FireeyeVulnerability, error) {
	resp, err := c.Request(fmt.Sprintf("/view/vulnerability?%s", parameters.query()))
	if err != nil {
		return nil, err
	}

	var vulnerabilities []*schema.FireeyeVulnerability
	if err := json.NewDecoder(resp).Decode(&vulnerabilities); err != nil {
		return nil, err
	}

	return vulnerabilities, nil
}
